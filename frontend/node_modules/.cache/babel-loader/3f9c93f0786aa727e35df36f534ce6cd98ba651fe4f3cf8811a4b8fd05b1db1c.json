{"ast":null,"code":"'use client';\n\nimport { render } from \"rc-util/es/React/render\";\nimport * as React from 'react';\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    prefixCls: globalPrefixCls,\n    getContainer: globalGetContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  } = defaultGlobalConfig;\n  const mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\n  const mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    container: mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [prefixCls, setPrefixCls] = React.useState();\n  const [container, setContainer] = React.useState();\n  const [maxCount, setMaxCount] = React.useState();\n  const [rtl, setRTL] = React.useState();\n  const [top, setTop] = React.useState();\n  const [bottom, setBottom] = React.useState();\n  const [api, holder] = useInternalNotification({\n    prefixCls,\n    getContainer: () => container,\n    maxCount,\n    rtl,\n    top,\n    bottom\n  });\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const sync = () => {\n    const {\n      prefixCls: nextGlobalPrefixCls,\n      container: nextGlobalContainer,\n      maxCount: nextGlobalMaxCount,\n      rtl: nextGlobalRTL,\n      top: nextTop,\n      bottom: nextBottom\n    } = getGlobalContext();\n    setPrefixCls(nextGlobalPrefixCls);\n    setContainer(nextGlobalContainer);\n    setMaxCount(nextGlobalMaxCount);\n    setRTL(nextGlobalRTL);\n    setTop(nextTop);\n    setBottom(nextBottom);\n  };\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, holder);\n});\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification;\n    // Delay render to avoid sync issue\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!notification.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\nfunction open(config) {\n  // Warning if exist theme\n  if (process.env.NODE_ENV !== 'production') {\n    warnContext('notification');\n  }\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\nconst methods = ['success', 'info', 'warning', 'error'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\nexport default staticMethods;","map":{"version":3,"names":["render","React","ConfigProvider","globalConfig","warnContext","PurePanel","useNotification","useInternalNotification","notification","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","prefixCls","globalPrefixCls","getContainer","globalGetContainer","rtl","maxCount","top","bottom","mergedPrefixCls","getPrefixCls","mergedContainer","document","body","container","GlobalHolder","forwardRef","_","ref","setPrefixCls","useState","setContainer","setMaxCount","setRTL","setTop","setBottom","api","holder","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","theme","getTheme","sync","nextGlobalPrefixCls","nextGlobalContainer","nextGlobalMaxCount","nextGlobalRTL","nextTop","nextBottom","useEffect","useImperativeHandle","instance","Object","assign","keys","forEach","method","apply","arguments","createElement","iconPrefixCls","flushNotice","holderFragment","createDocumentFragment","newNotification","fragment","node","Promise","resolve","then","task","type","open","config","destroy","key","setNotificationGlobalConfig","_a","call","process","env","NODE_ENV","push","methods","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","noop","actWrapper","wrapper"],"sources":["C:/Users/trung/OneDrive/Desktop/PRN231(BL5)/Project_ManageStorage/frontend/node_modules/antd/es/notification/index.js"],"sourcesContent":["'use client';\r\n\r\nimport { render } from \"rc-util/es/React/render\";\r\nimport * as React from 'react';\r\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\r\nimport PurePanel from './PurePanel';\r\nimport useNotification, { useInternalNotification } from './useNotification';\r\nlet notification = null;\r\nlet act = callback => callback();\r\nlet taskQueue = [];\r\nlet defaultGlobalConfig = {};\r\nfunction getGlobalContext() {\r\n  const {\r\n    prefixCls: globalPrefixCls,\r\n    getContainer: globalGetContainer,\r\n    rtl,\r\n    maxCount,\r\n    top,\r\n    bottom\r\n  } = defaultGlobalConfig;\r\n  const mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\r\n  const mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\r\n  return {\r\n    prefixCls: mergedPrefixCls,\r\n    container: mergedContainer,\r\n    rtl,\r\n    maxCount,\r\n    top,\r\n    bottom\r\n  };\r\n}\r\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((_, ref) => {\r\n  const [prefixCls, setPrefixCls] = React.useState();\r\n  const [container, setContainer] = React.useState();\r\n  const [maxCount, setMaxCount] = React.useState();\r\n  const [rtl, setRTL] = React.useState();\r\n  const [top, setTop] = React.useState();\r\n  const [bottom, setBottom] = React.useState();\r\n  const [api, holder] = useInternalNotification({\r\n    prefixCls,\r\n    getContainer: () => container,\r\n    maxCount,\r\n    rtl,\r\n    top,\r\n    bottom\r\n  });\r\n  const global = globalConfig();\r\n  const rootPrefixCls = global.getRootPrefixCls();\r\n  const rootIconPrefixCls = global.getIconPrefixCls();\r\n  const theme = global.getTheme();\r\n  const sync = () => {\r\n    const {\r\n      prefixCls: nextGlobalPrefixCls,\r\n      container: nextGlobalContainer,\r\n      maxCount: nextGlobalMaxCount,\r\n      rtl: nextGlobalRTL,\r\n      top: nextTop,\r\n      bottom: nextBottom\r\n    } = getGlobalContext();\r\n    setPrefixCls(nextGlobalPrefixCls);\r\n    setContainer(nextGlobalContainer);\r\n    setMaxCount(nextGlobalMaxCount);\r\n    setRTL(nextGlobalRTL);\r\n    setTop(nextTop);\r\n    setBottom(nextBottom);\r\n  };\r\n  React.useEffect(sync, []);\r\n  React.useImperativeHandle(ref, () => {\r\n    const instance = Object.assign({}, api);\r\n    Object.keys(instance).forEach(method => {\r\n      instance[method] = function () {\r\n        sync();\r\n        return api[method].apply(api, arguments);\r\n      };\r\n    });\r\n    return {\r\n      instance,\r\n      sync\r\n    };\r\n  });\r\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\r\n    prefixCls: rootPrefixCls,\r\n    iconPrefixCls: rootIconPrefixCls,\r\n    theme: theme\r\n  }, holder);\r\n});\r\nfunction flushNotice() {\r\n  if (!notification) {\r\n    const holderFragment = document.createDocumentFragment();\r\n    const newNotification = {\r\n      fragment: holderFragment\r\n    };\r\n    notification = newNotification;\r\n    // Delay render to avoid sync issue\r\n    act(() => {\r\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\r\n        ref: node => {\r\n          const {\r\n            instance,\r\n            sync\r\n          } = node || {};\r\n          Promise.resolve().then(() => {\r\n            if (!newNotification.instance && instance) {\r\n              newNotification.instance = instance;\r\n              newNotification.sync = sync;\r\n              flushNotice();\r\n            }\r\n          });\r\n        }\r\n      }), holderFragment);\r\n    });\r\n    return;\r\n  }\r\n  // Notification not ready\r\n  if (!notification.instance) {\r\n    return;\r\n  }\r\n  // >>> Execute task\r\n  taskQueue.forEach(task => {\r\n    // eslint-disable-next-line default-case\r\n    switch (task.type) {\r\n      case 'open':\r\n        {\r\n          act(() => {\r\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\r\n          });\r\n          break;\r\n        }\r\n      case 'destroy':\r\n        act(() => {\r\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\r\n        });\r\n        break;\r\n    }\r\n  });\r\n  // Clean up\r\n  taskQueue = [];\r\n}\r\n// ==============================================================================\r\n// ==                                  Export                                  ==\r\n// ==============================================================================\r\nfunction setNotificationGlobalConfig(config) {\r\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\r\n  // Trigger sync for it\r\n  act(() => {\r\n    var _a;\r\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\r\n  });\r\n}\r\nfunction open(config) {\r\n  // Warning if exist theme\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    warnContext('notification');\r\n  }\r\n  taskQueue.push({\r\n    type: 'open',\r\n    config\r\n  });\r\n  flushNotice();\r\n}\r\nfunction destroy(key) {\r\n  taskQueue.push({\r\n    type: 'destroy',\r\n    key\r\n  });\r\n  flushNotice();\r\n}\r\nconst methods = ['success', 'info', 'warning', 'error'];\r\nconst baseStaticMethods = {\r\n  open,\r\n  destroy,\r\n  config: setNotificationGlobalConfig,\r\n  useNotification,\r\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\r\n};\r\nconst staticMethods = baseStaticMethods;\r\nmethods.forEach(type => {\r\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\r\n    type\r\n  }));\r\n});\r\n// ==============================================================================\r\n// ==                                   Test                                   ==\r\n// ==============================================================================\r\nconst noop = () => {};\r\n/** @internal Only Work in test env */\r\n// eslint-disable-next-line import/no-mutable-exports\r\nexport let actWrapper = noop;\r\nif (process.env.NODE_ENV === 'test') {\r\n  actWrapper = wrapper => {\r\n    act = wrapper;\r\n  };\r\n}\r\nexport default staticMethods;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}