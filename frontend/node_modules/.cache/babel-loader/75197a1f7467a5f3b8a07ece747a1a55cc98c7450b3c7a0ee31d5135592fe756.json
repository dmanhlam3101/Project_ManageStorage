{"ast":null,"code":"// import authService from './auth';\nimport axios from 'axios';\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\n\n// Enable CORS for all routes\napp.use(cors());\n\n// Define your routes here\n\napp.listen(5000, () => {\n  console.log('API server is running on http://localhost:5000');\n});\nconst axiosClient = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// const requestIntercept = axiosClient.interceptors.request.use((request) =>\n// \trequestHandler(request),\n// );\n\naxiosClient.interceptors.response.use(response => successHandler(response), error => errorHandler(error));\nconst errorHandler = error => {\n  console.log('error', error);\n  /*\r\n   * When response code is 401, try to refresh the token or logOut.\r\n   * Eject the interceptor so it doesn't loop in case\r\n   * token refresh causes the 401 response\r\n   */\n  // if (error?.response?.status === 401) {\n  // \t//axios.interceptors.response.eject(requestIntercept);\n  // \t// clear old token\n  // \tlocalStorage.clear();\n  // \t// redirect to login page\n  // \twindow.location.href = window.location.origin + '/';\n  // }\n  // if (error?.response?.status === 415) {\n  // \t// show toast message chung là bạn không có quyền\n  // }\n\n  // // server error\n  // if (error?.response?.status === 500) {\n  // }\n\n  // return Promise.reject(error?.response?.data);\n};\n\nconst successHandler = response => {\n  return response;\n};\n\n// const requestHandler = (request) => {\n// \tconst token = localStorage.getItem('token');\n\n// \tif (token && token !== null) {\n// \t\trequest.headers['Authorization'] = `Bearer ${token}`;\n// \t}\n\n// \treturn request;\n// };\n\nexport default axiosClient;","map":{"version":3,"names":["axios","express","require","cors","app","use","listen","console","log","axiosClient","create","baseURL","headers","interceptors","response","successHandler","error","errorHandler"],"sources":["C:/Users/Manh Lam/frontend/src/services/httpCommon.js"],"sourcesContent":["// import authService from './auth';\r\nimport axios from 'axios';\r\nconst express = require('express');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\n\r\n// Enable CORS for all routes\r\napp.use(cors());\r\n\r\n// Define your routes here\r\n\r\napp.listen(5000, () => {\r\n  console.log('API server is running on http://localhost:5000');\r\n});\r\nconst axiosClient = axios.create({\r\n\tbaseURL: 'http://localhost:5000',\r\n\theaders: {\r\n\t\t'Content-Type': 'application/json',\r\n\t\t\r\n\t},\r\n\t\r\n});\r\n\r\n// const requestIntercept = axiosClient.interceptors.request.use((request) =>\r\n// \trequestHandler(request),\r\n// );\r\n\r\naxiosClient.interceptors.response.use(\r\n\t(response) => successHandler(response),\r\n\t(error) => errorHandler(error),\r\n);\r\n\r\nconst errorHandler = (error) => {\r\n\tconsole.log('error', error);\r\n\t/*\r\n\t * When response code is 401, try to refresh the token or logOut.\r\n\t * Eject the interceptor so it doesn't loop in case\r\n\t * token refresh causes the 401 response\r\n\t */\r\n\t// if (error?.response?.status === 401) {\r\n\t// \t//axios.interceptors.response.eject(requestIntercept);\r\n\t// \t// clear old token\r\n\t// \tlocalStorage.clear();\r\n\t// \t// redirect to login page\r\n\t// \twindow.location.href = window.location.origin + '/';\r\n\t// }\r\n\t// if (error?.response?.status === 415) {\r\n\t// \t// show toast message chung là bạn không có quyền\r\n\t// }\r\n\r\n\t// // server error\r\n\t// if (error?.response?.status === 500) {\r\n\t// }\r\n\r\n\t// return Promise.reject(error?.response?.data);\r\n};\r\n\r\nconst successHandler = (response) => {\r\n\treturn response;\r\n};\r\n\r\n// const requestHandler = (request) => {\r\n// \tconst token = localStorage.getItem('token');\r\n\r\n// \tif (token && token !== null) {\r\n// \t\trequest.headers['Authorization'] = `Bearer ${token}`;\r\n// \t}\r\n\r\n// \treturn request;\r\n// };\r\n\r\nexport default axiosClient;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAME,GAAG,GAAGH,OAAO,CAAC,CAAC;;AAErB;AACAG,GAAG,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;;AAEf;;AAEAC,GAAG,CAACE,MAAM,CAAC,IAAI,EAAE,MAAM;EACrBC,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;AAC/D,CAAC,CAAC;AACF,MAAMC,WAAW,GAAGT,KAAK,CAACU,MAAM,CAAC;EAChCC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;IACR,cAAc,EAAE;EAEjB;AAED,CAAC,CAAC;;AAEF;AACA;AACA;;AAEAH,WAAW,CAACI,YAAY,CAACC,QAAQ,CAACT,GAAG,CACnCS,QAAQ,IAAKC,cAAc,CAACD,QAAQ,CAAC,EACrCE,KAAK,IAAKC,YAAY,CAACD,KAAK,CAC9B,CAAC;AAED,MAAMC,YAAY,GAAID,KAAK,IAAK;EAC/BT,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEQ,KAAK,CAAC;EAC3B;AACD;AACA;AACA;AACA;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;AACD,CAAC;;AAED,MAAMD,cAAc,GAAID,QAAQ,IAAK;EACpC,OAAOA,QAAQ;AAChB,CAAC;;AAED;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,eAAeL,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}