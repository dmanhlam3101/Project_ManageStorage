{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manh Lam\\\\Desktop\\\\PRN231_Project\\\\frontend\\\\src\\\\views\\\\Storage\\\\Storage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport { Table } from 'antd';\nimport { getListStorage } from '../../services/storageService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Storage() {\n  _s();\n  //getListStorage().then(console.log)\n  const [list, setList] = useState([]);\n  const [dataSource, setDataSource] = useState([]);\n  const getData = useCallback(() => {\n    //setLoading(true);\n    getListStorage().then(res => {\n      //const listAsssignmentId = res.data.assignmentIdReq;\n      //setList(listAsssignmentId);\n      const convertedData = res.data.content.map(data => {\n        const {\n          productId,\n          productName,\n          quantity,\n          unitName,\n          supplier\n        } = data;\n        return {\n          key: productId,\n          productName,\n          quantity,\n          unitName,\n          supplierId: `${supplier.supplierId}`,\n          supplierName: `${supplier.supplierName}`\n        };\n      });\n      setDataSource(convertedData);\n      //setTotalElements(res.data.totalElements);\n    }).catch(error => {\n      message.error(error.message);\n    });\n    setLoading(false);\n  }, []);\n  useEffect(() => {\n    getData();\n  }, [getData]);\n  console.log(getData);\n  console.log(dataSource);\n  const columns = [{\n    title: 'Name',\n    dataIndex: 'name'\n  }, {\n    title: 'Chinese Score',\n    dataIndex: 'chinese',\n    sorter: {\n      compare: (a, b) => a.chinese - b.chinese,\n      multiple: 3\n    }\n  }, {\n    title: 'Math Score',\n    dataIndex: 'math',\n    sorter: {\n      compare: (a, b) => a.math - b.math,\n      multiple: 2\n    }\n  }, {\n    title: 'English Score',\n    dataIndex: 'english',\n    sorter: {\n      compare: (a, b) => a.english - b.english,\n      multiple: 1\n    }\n  }];\n  const data = [{\n    key: '1',\n    name: 'John Brown',\n    chinese: 98,\n    math: 60,\n    english: 70\n  }, {\n    key: '2',\n    name: 'Jim Green',\n    chinese: 98,\n    math: 66,\n    english: 89\n  }, {\n    key: '3',\n    name: 'Joe Black',\n    chinese: 98,\n    math: 90,\n    english: 70\n  }, {\n    key: '4',\n    name: 'Jim Red',\n    chinese: 88,\n    math: 99,\n    english: 89\n  }];\n  const onChange = (pagination, filters, sorter, extra) => {\n    console.log('params', pagination, filters, sorter, extra);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      dataSource: data,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 6\n    }, this), \";\"]\n  }, void 0, true);\n}\n_s(Storage, \"KhBbkxBewtLBnk4L90CAoQ1nn8E=\");\n_c = Storage;\n;\nexport default Storage;\nvar _c;\n$RefreshReg$(_c, \"Storage\");","map":{"version":3,"names":["React","useCallback","useState","Table","getListStorage","jsxDEV","_jsxDEV","Fragment","_Fragment","Storage","_s","list","setList","dataSource","setDataSource","getData","then","res","convertedData","data","content","map","productId","productName","quantity","unitName","supplier","key","supplierId","supplierName","catch","error","message","setLoading","useEffect","console","log","columns","title","dataIndex","sorter","compare","a","b","chinese","multiple","math","english","name","onChange","pagination","filters","extra","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Manh Lam/Desktop/PRN231_Project/frontend/src/views/Storage/Storage.jsx"],"sourcesContent":["import React, { useCallback,useState } from 'react';\r\nimport { Table} from 'antd';\r\n\r\nimport { getListStorage } from '../../services/storageService';\r\n\r\nfunction Storage() {\r\n    \r\n    //getListStorage().then(console.log)\r\n    const [list, setList] = useState([]);\r\n    const [dataSource, setDataSource] = useState([]);\r\n    const getData = useCallback(() => {\r\n      //setLoading(true);\r\n      getListStorage()\r\n        .then((res) => {\r\n          //const listAsssignmentId = res.data.assignmentIdReq;\r\n          //setList(listAsssignmentId);\r\n          const convertedData = res.data.content.map((data) => {\r\n            const {\r\n              productId,\r\n              productName,\r\n              quantity,\r\n              unitName,\r\n              supplier,\r\n            } = data;\r\n  \r\n            return {\r\n              key: productId,\r\n              productName,\r\n              quantity,\r\n              unitName,\r\n              supplierId: `${supplier.supplierId}`,\r\n              supplierName: `${supplier.supplierName}`,\r\n\r\n            };\r\n          });\r\n          setDataSource(convertedData);\r\n          //setTotalElements(res.data.totalElements);\r\n        })\r\n        .catch((error) => {\r\n          message.error(error.message);\r\n        });\r\n  \r\n      setLoading(false);\r\n    }, []);\r\n    useEffect(() => {\r\n      getData();\r\n    }, [getData]);\r\n\r\n    console.log(getData)\r\n    console.log(dataSource)\r\n\r\n    const columns = [\r\n        {\r\n          title: 'Name',\r\n          dataIndex: 'name',\r\n        },\r\n        {\r\n          title: 'Chinese Score',\r\n          dataIndex: 'chinese',\r\n          sorter: {\r\n            compare: (a, b) => a.chinese - b.chinese,\r\n            multiple: 3,\r\n          },\r\n        },\r\n        {\r\n          title: 'Math Score',\r\n          dataIndex: 'math',\r\n          sorter: {\r\n            compare: (a, b) => a.math - b.math,\r\n            multiple: 2,\r\n          },\r\n        },\r\n        {\r\n          title: 'English Score',\r\n          dataIndex: 'english',\r\n          sorter: {\r\n            compare: (a, b) => a.english - b.english,\r\n            multiple: 1,\r\n          },\r\n        },\r\n      ];\r\n      const data = [\r\n        {\r\n          key: '1',\r\n          name: 'John Brown',\r\n          chinese: 98,\r\n          math: 60,\r\n          english: 70,\r\n        },\r\n        {\r\n          key: '2',\r\n          name: 'Jim Green',\r\n          chinese: 98,\r\n          math: 66,\r\n          english: 89,\r\n        },\r\n        {\r\n          key: '3',\r\n          name: 'Joe Black',\r\n          chinese: 98,\r\n          math: 90,\r\n          english: 70,\r\n        },\r\n        {\r\n          key: '4',\r\n          name: 'Jim Red',\r\n          chinese: 88,\r\n          math: 99,\r\n          english: 89,\r\n        },\r\n      ];\r\n      const onChange = (pagination, filters, sorter, extra) => {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n      };\r\n\r\n  return (\r\n    <>\r\n     <Table columns={columns} dataSource={data} onChange={onChange} />;\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Storage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAACC,QAAQ,QAAQ,OAAO;AACnD,SAASC,KAAK,QAAO,MAAM;AAE3B,SAASC,cAAc,QAAQ,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/D,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAEf;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMa,OAAO,GAAGd,WAAW,CAAC,MAAM;IAChC;IACAG,cAAc,CAAC,CAAC,CACbY,IAAI,CAAEC,GAAG,IAAK;MACb;MACA;MACA,MAAMC,aAAa,GAAGD,GAAG,CAACE,IAAI,CAACC,OAAO,CAACC,GAAG,CAAEF,IAAI,IAAK;QACnD,MAAM;UACJG,SAAS;UACTC,WAAW;UACXC,QAAQ;UACRC,QAAQ;UACRC;QACF,CAAC,GAAGP,IAAI;QAER,OAAO;UACLQ,GAAG,EAAEL,SAAS;UACdC,WAAW;UACXC,QAAQ;UACRC,QAAQ;UACRG,UAAU,EAAG,GAAEF,QAAQ,CAACE,UAAW,EAAC;UACpCC,YAAY,EAAG,GAAEH,QAAQ,CAACG,YAAa;QAEzC,CAAC;MACH,CAAC,CAAC;MACFf,aAAa,CAACI,aAAa,CAAC;MAC5B;IACF,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;IAC9B,CAAC,CAAC;IAEJC,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EACNC,SAAS,CAAC,MAAM;IACdnB,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEboB,OAAO,CAACC,GAAG,CAACrB,OAAO,CAAC;EACpBoB,OAAO,CAACC,GAAG,CAACvB,UAAU,CAAC;EAEvB,MAAMwB,OAAO,GAAG,CACZ;IACEC,KAAK,EAAE,MAAM;IACbC,SAAS,EAAE;EACb,CAAC,EACD;IACED,KAAK,EAAE,eAAe;IACtBC,SAAS,EAAE,SAAS;IACpBC,MAAM,EAAE;MACNC,OAAO,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,OAAO,GAAGD,CAAC,CAACC,OAAO;MACxCC,QAAQ,EAAE;IACZ;EACF,CAAC,EACD;IACEP,KAAK,EAAE,YAAY;IACnBC,SAAS,EAAE,MAAM;IACjBC,MAAM,EAAE;MACNC,OAAO,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACI,IAAI,GAAGH,CAAC,CAACG,IAAI;MAClCD,QAAQ,EAAE;IACZ;EACF,CAAC,EACD;IACEP,KAAK,EAAE,eAAe;IACtBC,SAAS,EAAE,SAAS;IACpBC,MAAM,EAAE;MACNC,OAAO,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACK,OAAO,GAAGJ,CAAC,CAACI,OAAO;MACxCF,QAAQ,EAAE;IACZ;EACF,CAAC,CACF;EACD,MAAM1B,IAAI,GAAG,CACX;IACEQ,GAAG,EAAE,GAAG;IACRqB,IAAI,EAAE,YAAY;IAClBJ,OAAO,EAAE,EAAE;IACXE,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE;EACX,CAAC,EACD;IACEpB,GAAG,EAAE,GAAG;IACRqB,IAAI,EAAE,WAAW;IACjBJ,OAAO,EAAE,EAAE;IACXE,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE;EACX,CAAC,EACD;IACEpB,GAAG,EAAE,GAAG;IACRqB,IAAI,EAAE,WAAW;IACjBJ,OAAO,EAAE,EAAE;IACXE,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE;EACX,CAAC,EACD;IACEpB,GAAG,EAAE,GAAG;IACRqB,IAAI,EAAE,SAAS;IACfJ,OAAO,EAAE,EAAE;IACXE,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE;EACX,CAAC,CACF;EACD,MAAME,QAAQ,GAAGA,CAACC,UAAU,EAAEC,OAAO,EAAEX,MAAM,EAAEY,KAAK,KAAK;IACvDjB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEc,UAAU,EAAEC,OAAO,EAAEX,MAAM,EAAEY,KAAK,CAAC;EAC3D,CAAC;EAEL,oBACE9C,OAAA,CAAAE,SAAA;IAAA6C,QAAA,gBACC/C,OAAA,CAACH,KAAK;MAACkC,OAAO,EAAEA,OAAQ;MAACxB,UAAU,EAAEM,IAAK;MAAC8B,QAAQ,EAAEA;IAAS;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAClE;EAAA,eAAE,CAAC;AAEP;AAAC/C,EAAA,CAnHQD,OAAO;AAAAiD,EAAA,GAAPjD,OAAO;AAmHf;AAED,eAAeA,OAAO;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}